#!/usr/bin/python3

# This program should work on all linux systems with pwntools and python3 installed.

import subprocess
from pwn import *
import pty
import random


def noise() -> int:
    return random.uniform(0, 4)


def exploit():
    kernel_version = subprocess.check_output(
        ['uname', '-r']).decode().strip()  # reads kernel version
    print("Unauthenticated Linux privesc exploit. Code name PwnSisD")
    print("This exploit targets the systemd process and gains a shell. It is 100% reliable.")
    log.info("Starting exploit check:")
    log.info(f"Linux kernel version: {kernel_version}")
    log.success("Status:  VULNERABLE!!!")
    p = log.progress(f"Compiling exploit for kernel: {kernel_version}")
    # Fake. No files are actually created.
    p.status(f"exec: gcc exp-{kernel_version}.c -o /tmp/exp-{kernel_version}")
    time.sleep(1 + noise())
    p.success("Done")
    p = log.progress("Executing exploit...")
    p.status("Init")
    time.sleep(1 + noise())
    p.status("Load malicious kernel module...")
    time.sleep(4 + noise())
    p.status("Verifing module loaded. Cross your fingers!")
    time.sleep(3 + noise())
    p.success("Module loaded!")
    log.info("Calling pwn kernel module.")
    time.sleep(4 + noise())
    log.success("Success! ENJOY YOUR ROOT SHELL!!!")

    pty.spawn(['sudo', '/bin/sh'])  # Executes root shell for user. Interactive


if __name__ == "__main__":
    exploit()
